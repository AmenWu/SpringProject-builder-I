package com.risenb.controller.manage;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.risenb.base.BaseControllor;
import com.risenb.bean.Error;
import com.risenb.bean.Result;
import com.risenb.constant.Constant;
import com.risenb.manage.bean.Manager;
import com.risenb.manage.bean.Page;
import com.risenb.manage.bean.Role;
import com.risenb.manage.bean.SysOpLog;
import com.risenb.manage.service.ManagerService;
import com.risenb.manage.service.RoleService;
import com.risenb.manage.service.SysOpLogService;
import com.risenb.util.EncryptUtil;
import com.risenb.util.JsonUtils;

/**
 * <p>
 * Title:操作员控制类
 * </p>
 * <p>
 * Description:
 * </p>
 * 
 * @version 1.0
 */
@Controller
@RequestMapping("manage")
public class ManagerController extends BaseControllor {
	
	@Resource
	ManagerService managerService;
	
	@Resource
	RoleService roleService;
	
	@Resource
	SysOpLogService systemLogService;
	
	/**
	 * 跳转到修改密码页面
	 * @param mid
	 * @param request
	 * @param response
	 */
	@RequestMapping("/toModifyPwd")
	public String toModifyPwd(Integer mid){
		request().setAttribute("mid", mid);
		return "manage/manage_chgpwd";
	}
	
	/**
	 * 修改密码
	 * @param newpwd
	 * @param mid
	 * @throws IOException
	 */
	@RequestMapping("/modifyPwd")
	public void modifyPwd(Integer mid,String newpwd) throws IOException {
		Manager manager = managerService.queryManagerById(mid);
	    manager.setPassword(EncryptUtil.encrypt(newpwd));
		if(managerService.modifyManagerById(manager) > 0 ){
			returnJson(Result.success("修改成功"));
		}
		returnJson(new Result("0", "修改失败"));
	}

	/**
	 * 查询管理员列表
	 * @param params
	 * @param pageSize
	 * @param pageCurrent
	 * @return
	 */
	@RequestMapping(value = "/managerList")
	public ModelAndView managerList(Map<String, Object> params, Integer pageSize, Integer pageCurrent) {
		String username = getString("username");
		Page<Manager> page = new Page<Manager>().setPageNo(pageCurrent == null ? 1 : pageCurrent).setPageSize(pageSize == null ? 15 : pageSize)
				.setParams(params);
		page.getParams().put("username", username);
		page = managerService.queryManagerList(page);
		ModelAndView mv = new ModelAndView("manage/manage_manage");
		Map<String, Object> map = new HashMap<String,Object>();
		Role role = new Role(); role.setStatus(0);  
		map.put("role", role);
		mv.addObject("page", page);
		mv.addObject("username", username);
		return mv;
	}

	/**
	 * 跳转到编辑管理员页面
	 * @param mid
	 * @return
	 */
	@RequestMapping(value = "toSaveManager")
	public ModelAndView toSaveManager(Integer mid) {
		ModelAndView mv = new ModelAndView("manage/manage_save");
		if (mid != null) {
			Manager m = managerService.queryManagerById(mid);
			mv.addObject("manager", m);
		}
		return mv;
	}

	/**
	 * 编辑管理员信息
	 * @param manager
	 * @throws IOException
	 */
	@RequestMapping(value = "saveManager")
	public void saveManager(@RequestBody @ModelAttribute Manager manager)throws IOException {
		int row = 0;
		Manager m = (Manager) session().getAttribute(Constant.SESSION_MANAGER);
		manager.setOperatime(new Date());
		manager.setOperator(m.getId());
		if (manager.getId() == null) {
			manager.setCreatetime(new Date());
			manager.setPassword(EncryptUtil.encrypt(manager.getPassword()));
			SysOpLog bs = new SysOpLog(m.getIdkey(), new Date(), "操作员管理", manager.getIdkey(), "添加操作员信息", 0, 0);
			if (managerService.queryManager(new Manager().setUsername(manager.getUsername())) != null) {
				bs.setStatus(1);
				systemLogService.createLog(bs);   
				returnJson(new Result("0", "该管理员已存在"));
				return;
			}
			row = managerService.createManager(manager);
			systemLogService.createLog(bs);
		} else {
			if (manager.getPassword().length() != 32) {
				manager.setPassword(EncryptUtil.encrypt(manager.getPassword()));
			}
			SysOpLog bs = new SysOpLog(m.getIdkey(), new Date(), "操作员管理", manager.getIdkey(), "修改操作员信息", 0, 0);
			row = managerService.modifyManagerById(manager);
			systemLogService.createLog(bs);
		}
		if (row > 0) {
			returnJson(Result.success("操作成功"));
		} else {
			returnJson(new Result("0", "操作失败"));
		}
	}

	/**
	 * 删除操作员
	 * @param ids
	 * @throws IOException
	 */
	@RequestMapping(value = "del")
	public void deleteManager(String ids,String id) throws IOException {
		int row = 0;
		List<String> list = new ArrayList<String>();
		if(!StringUtils.isBlank(id)){
			list.add(id);
			row = managerService.removeManagerByIds(list);
		}else if(!StringUtils.isBlank(ids)){
		    list = Arrays.asList(ids.split(","));
			row = managerService.removeManagerByIds(list);
		}
		if (row > 0) {
			returnJson(Result.success("删除成功"));
		} else {
			returnJson(new Result("0","删除失败"));
		}
	}

	/**
	 * 冻结操作员
	 * @param mid
	 * @param session
	 * @throws IOException
	 */
	@RequestMapping(value = "frozen")
	public void frozen(Integer mid) throws IOException {
		Manager mng = (Manager) session().getAttribute(Constant.SESSION_MANAGER);
		Manager manager = managerService.queryManagerById(mid);
		SysOpLog baseLog = null;
		if (manager.getStatus() == null || manager.getStatus().equals("1")) {
			manager.setStatus("0");
			baseLog = new SysOpLog(mng.getIdkey(), new Date(), "操作员管理", manager.getIdkey(), "启用用户", 0, 0);
		} else {
			manager.setStatus("1");
			baseLog = new SysOpLog(mng.getIdkey(), new Date(), "操作员管理", manager.getIdkey(), "冻结用户", 0, 0);
		}
		int row = managerService.modifyManagerById(manager);
		Map<String, String> map = new HashMap<String,String>();
		if("0".equals(manager.getStatus())){
			map .put("msg", "启用成功");
		}else{
			map .put("msg", "冻结成功");
		}
		if (row > 0) {
			systemLogService.createLog(baseLog.setStatus(0));
			returnJson(Result.success("冻结成功"));
		} else {
			systemLogService.createLog(baseLog.setStatus(1));
			returnJson(new Result("0","冻结失败"));
		}
	}
	
	/**
	 * 跳转的分配角色的页面
	 * @param mid
	 * @return
	 */
	@RequestMapping(value = "toAssignRole")
	public String toAssignRole(Integer mid){
		List<Role> existingRoleList = managerService.queryExistingRoleByMid(mid); 
		List<Role> roleList = managerService.queryRoleList();
		request().setAttribute("roleList", roleList);
		request().setAttribute("existingRoleList",JsonUtils.objectToJson(existingRoleList));
		request().setAttribute("mid", mid);
		return "manage/manage_assignrole";
	} 
	
	/**
	 * 分配角色
	 * @param mid
	 * @param ids
	 */
	@RequestMapping(value = "assignRole")
	public void assignRole(Integer mid,String ids){
		Manager manager =(Manager)session().getAttribute(Constant.SESSION_MANAGER);
		Map<String, Object> map = new HashMap<String,Object>();
		List<Integer> list = new ArrayList<Integer>();
		if(!StringUtils.isBlank(ids)){
			for (String id : ids.split(",")) {
				list.add(Integer.parseInt(id));
			}
		}
		map.put("manageId", mid);  map.put("ids", list);
		map.put("operator", manager.getId()); 
		map.put("operatime", new Date());
		int row = managerService.assignRole(map);
		if(row > 0){
			returnJson(Result.success("分配成功"));
		}
		returnJson(new Result("0","分配失败"));
	} 

}
