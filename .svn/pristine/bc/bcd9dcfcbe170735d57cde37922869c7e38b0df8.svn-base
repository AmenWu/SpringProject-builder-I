package com.risenb.manage.service;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.risenb.manage.bean.Permission;
import com.risenb.manage.dao.PermissionMapper;
import com.risenb.util.DateUtil;

@Service(value = "permissionService")
public class PermissionServiceImpl implements PermissionService {
	
	@Autowired
	PermissionMapper permissionMapper;
	
	@Override
	public List<Permission> queryPermissionList(Permission perm) {
		List<Permission> permissionList = permissionMapper.queryPermissionList(perm);
		for (Permission permission : permissionList) {
			permission.setShowOperatime(DateUtil.format(new Date(), "yyyy-MM-dd HH:mm"));
		}
		return permissionList;
	}
	
	@Override
	public int removePermissionById(Integer id) {
		int perNum = 0;
		//删除parent_id为id的记录
		Permission permission = new Permission();
		permission.setParentid(id);
		
		//删除id为id的记录
		Permission perm = new Permission();
		perm.setId(id);
		
		//删除权限角色关联记录
		Permission per = new Permission();
		per.setPermissionid(id);
		permissionMapper.removePermissionRole(per);
		List<Permission> perList = permissionMapper.queryPermissionList(permission);
		if (null != perList && perList.size() > 0) {
			int num = permissionMapper.removePermission(permission);
			if (num > 0) {
				perNum = permissionMapper.removePermission(perm);
			}
		} else {
			perNum = permissionMapper.removePermission(perm);
		}
		return perNum;
	}
	@Override
	public int createPermission(Permission permission) {
		return permissionMapper.createPermission(permission);
	}
	
	@Override
	public Permission queryPermissionById(Integer id) {
		return permissionMapper.queryPermissionById(id);
	}
	@Override
	public int modifyPermissionById(Permission permission) {
		return permissionMapper.modifyPermissionById(permission);
	}
	
	@Override
	public List<Permission> queryPermissionByParentId(Integer parentid) {
		Permission perm = new Permission();
		perm.setParentid(parentid);
		List<Permission> parentPermissionList = permissionMapper.queryPermissionList(perm);
		for (Permission permission : parentPermissionList) {
			permission.setShowOperatime(DateUtil.format(new Date(), "yyyy-MM-dd HH:mm"));
		}
		return parentPermissionList;
	}
	@Override
	public List<Permission> queryPermissionListById(Integer manId) {
		return permissionMapper.queryByManId(manId);
	} 
	
	//fgiwefew
	public List<Permission> queryPermissionByRid(Integer roleId) {
		List<Permission> permissionList = permissionMapper.queryPermissionByRoleid(roleId);
		for (int i = 0; i < permissionList.size(); i++) {
			Permission p = permissionMapper.queryPermissionById(permissionList.get(i).getPermissionid());
			permissionList.get(i).setPermission(p);
		}
		return permissionList;
	}
	
	public int removePermissionRoleByRoleId(Integer roleid) {
		Permission permission = new Permission();
		permission.setRoleid(roleid);
		return permissionMapper.removePermissionRole(permission);
	}
	
	public int createPermissionRole(Permission permission) {
		return permissionMapper.createPermissionRole(permission);
	}

	@Override
	public int batchCreatePermissionRole(Integer manageId, Integer roleId, List<String> pidList) {
		return permissionMapper.batchCreatePermissionRole(manageId,roleId,pidList);
	}

}
