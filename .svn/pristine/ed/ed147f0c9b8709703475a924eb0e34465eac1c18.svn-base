package com.risenb.cache;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpSession;

import com.risenb.manage.bean.Permission;

/**
 * <pre>
 * <p>Title: </p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2010 - 2016 </p>
 * <p>Company: Beijing Risenb Technology Co.,Ltd. </p>
 * <p>Build: 2017年8月14日 下午5:43:38 </p>
 * </pre>
 *
 * @author Chang Yuxin
 * @version 1.0
 */
public class CacheFactory {
	private static Map<String, Object> CACHE = new HashMap<String, Object>();

	private static Map<String, HttpSession> LOGIN_STATUS_CACHE = new HashMap<String, HttpSession>(0);

	private static Map<Integer, Permission> PERMISSION_CACHE = new HashMap<Integer, Permission>();
	
	private static Map<String, Permission> PERMISSION_URL_CACHE = new HashMap<String, Permission>();

	static {
		CACHE.put("LOGIN_STATUS_CACHE", LOGIN_STATUS_CACHE);
		CACHE.put("PERMISSION_CACHE", PERMISSION_CACHE);
		CACHE.put("PERMISSION_URL_CACHE", PERMISSION_URL_CACHE);
	}

	/**
	 * @param cacheName
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static Map<Object, Object> get(String cacheName) {
		return (Map<Object, Object>) CACHE.get(cacheName);
	}

	/**
	 * @param cacheName
	 * @return
	 */
	public static Object get(String cacheName, Object key) {
		return get(cacheName).get(key);
	}

	/**
	 * @param cacheName
	 * @param key
	 * @param value
	 * @return
	 */
	public static void put(String cacheName, Object key, Object value) {
		get(cacheName).put(key, value);
	}

	/**
	 * @param cacheName
	 * @param key
	 * @return
	 */
	public static boolean contains(String cacheName, Object key) {
		return get(cacheName).containsKey(key);
	}

	/**
	 * @param string
	 * @param userName
	 */
	public static void remove(String cacheName, Object key) {
		get(cacheName).remove(key);
	}

	/**
	 * @param string
	 * @param userName
	 */
	public static void clear(String cacheName) {
		get(cacheName).clear();
	}

}
