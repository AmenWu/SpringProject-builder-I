package com.risenb.controller.manage;

import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;
import com.risenb.base.BaseControllor;
import com.risenb.bean.Result;
import com.risenb.manage.bean.Page;
import com.risenb.manage.bean.Permission;
import com.risenb.manage.service.PermissionService;
import com.risenb.util.JsonUtil;

/**
 * <p>
 * Title:权限控制类
 * </p>
 * <p>
 * Description:
 * </p>
 * 
 * @version 1.0
 */
@Controller
@RequestMapping("/permission")
public class PermissionController extends BaseControllor {

	@Resource
	PermissionService permissionService;

	/**
	 * 权限列表
	 * 
	 * @param parentid
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/navList")
	public ModelAndView navList(Integer parentId) {
		Page<Permission> page = new Page<Permission>();
		page.getParams().put("isMenu", 0);
		page.setIsPage(false);
		page = permissionService.queryPermissionPage(page);
		List<Permission> permissionList = null;
		if (null != page) {
			permissionList = (List<Permission>) page.getResults();
		}
		String json = JsonUtil.objectToJson(permissionList);
		request().setAttribute("ztreeJson", json);
		request().setAttribute("parentId", parentId);
		return new ModelAndView("/manage/permission_manage").addObject("permissions", permissionList);
	}

	/**
	 * 跳转到权限编辑页面
	 * 
	 * @param id
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("toSavePage")
	public ModelAndView toSavePage(Integer permissionId, Integer parentId) {
		ModelAndView model = new ModelAndView("/manage/permission_save");
		Page<Permission> page = new Page<Permission>();
		page.getParams().put("permissionId", permissionId);
		page.setIsPage(false);
		page = permissionService.queryPermissionPage(page);
		List<Permission> permissionList = null;
		Permission permission = null;
		if (null != page) {
			permissionList = (List<Permission>) page.getResults();
			if (null != permissionList && permissionList.size() > 0) {
				permission = permissionList.get(0);
			}
		}
		model.addObject("permission", permission);
		model.addObject("parentId", parentId);
		return model;
	}


	/**
	 * 获取权限列表数据
	 * 
	 * @param parentid
	 */
	@RequestMapping("/list")
	public String list(Integer parentId,Map<String, Object> params, Integer pageSize,Integer pageCurrent) {
		if (parentId == null) {
			parentId = 0;
		}
		params.put("parentId", parentId);
		Page<Permission> page = new Page<Permission>().setPageNo(pageCurrent == null ? 1 : pageCurrent)
				.setPageSize(pageSize == null ? 15 : pageSize).setParams(params);
		page = permissionService.queryPermissionPage(page);
		request().setAttribute("page", page);
		request().setAttribute("parentId", parentId);
		return "/manage/permission_list";
	}

	/**
	 * 保存编辑
	 * 
	 * @param id
	 * @return
	 * @throws IOException
	 */
	@RequestMapping("/savePermissions")
	public void savePermissions(Integer id) throws IOException {
		String title = getString("title");
		String sort = getString("sort");
		String parentId = getString("parentId");

		if (null == sort || "".equals(sort)) {
			sort = "0";
		}
		String url = request().getParameter("url");
		String isMenu = request().getParameter("isMenu");
		if (null == isMenu || "".equals(isMenu)) {
			isMenu = "0";
		}

		Permission permission = new Permission();
		permission.setPermissionId(id);
		permission.setUrl(url);
		permission.setTitle(title);
		permission.setIsMenu(Integer.valueOf(isMenu));
		permission.setSort(Integer.parseInt(sort));
		permission.setOperaTime(new Date());
		boolean flag = false;
		String msg = "";
		if (id != null) {
			flag = permissionService.update(permission);
			msg = flag  == true? "修改成功" : "修改失败";
		} else {
			permission.setParentId(Integer.parseInt(parentId));
			flag = permissionService.insert(permission);
			msg = flag  == true? "添加成功" : "添加失败";
		}
		returnJson(flag==  true ? Result.success(msg) :Result.failure(msg));
	}

	/**
	 * 删除
	 * 
	 * @param id
	 * @return
	 * @throws IOException
	 */
	@RequestMapping("/del")
	public void delPermissions(Integer id) throws IOException {
		Permission permission = new Permission();
		permission.setPermissionId(id);
		boolean flag = false;
		String msg = "";
		flag = permissionService.delete(permission);
		msg = flag  == true? "删除成功" : "删除失败";
		returnJson(flag==  true ? Result.success(msg) :Result.failure(msg));
	}

}
