package com.risenb.controller.manage;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;
import com.risenb.base.BaseControllor;
import com.risenb.bean.Result;
import com.risenb.constant.Constant;
import com.risenb.manage.bean.Manager;
import com.risenb.manage.bean.Page;
import com.risenb.manage.bean.Role;
import com.risenb.manage.bean.SysOpLog;
import com.risenb.manage.service.ManagerService;
import com.risenb.manage.service.RoleService;
import com.risenb.manage.service.SysOpLogService;
import com.risenb.util.EncryptUtil;
import com.risenb.util.JsonUtil;

/**
 * <pre>
 *   	<p>Title:操作员控制类 </p>
 *  	<p>Description:</p>
 * </pre>
 * 
 * @version 1.0
 */
@Controller
@RequestMapping("manage")
public class ManagerController extends BaseControllor {

	@Resource
	ManagerService managerService;

	@Resource
	RoleService roleService;

	@Resource
	SysOpLogService systemLogService;

	/**
	 * 跳转到修改密码页面
	 * 
	 * @param mid
	 * @param request
	 * @param response
	 */
	@RequestMapping("/toModifyPwd")
	public String toModifyPwd(Integer mid) {
		request().setAttribute("mid", mid);
		return "manage/manage_chgpwd";
	}

	/**
	 * 修改密码
	 * 
	 * @param newpwd
	 * @param mid
	 * @throws IOException
	 */
	@RequestMapping("/modifyPwd")
	public void modifyPwd(Integer mid, String newpwd) throws IOException {
		Manager manager = managerService.queryManagerById(mid);
		manager.setPassword(EncryptUtil.encrypt(newpwd));
		int row = managerService.modifyManagerById(manager);
		returnJson(row > 0 ? Result.success("操作成功！") : Result.failure("0", "操作失败！"));
	}

	/**
	 * 查询管理员列表
	 * 
	 * @param params
	 * @param pageSize
	 * @param pageCurrent
	 * @return
	 */
	@RequestMapping(value = "/list")
	public ModelAndView managerList(Map<String, Object> params, Integer pageSize, Integer pageCurrent) {
		String userName = getString("userName");
		Page<Manager> page = new Page<Manager>().setPageNo(pageCurrent == null ? 1 : pageCurrent).setPageSize(pageSize == null ? 15 : pageSize)
				.setParams(params);
		page.addParams("userName", userName);
		page = managerService.queryManagerList(page);
		ModelAndView mv = new ModelAndView("manage/manage_manage");
		Map<String, Object> map = new HashMap<String, Object>();
		Role role = new Role();
		role.setStatus(0);
		map.put("role", role);
		mv.addObject("page", page);
		mv.addObject("userName", userName);
		return mv;
	}

	/**
	 * 跳转到编辑管理员页面
	 * 
	 * @param mid
	 * @return
	 */
	@RequestMapping(value = "toSavePage")
	public ModelAndView toSaveManager(Integer mid) {
		ModelAndView mv = new ModelAndView("manage/manage_save");
		if (mid != null) {
			Manager m = managerService.queryManagerById(mid);
			mv.addObject("manager", m);
		}
		return mv;
	}

	/**
	 * 编辑管理员信息
	 * 
	 * @param manager
	 * @throws IOException
	 */
	@RequestMapping(value = "saveManager")
	public void saveManager(@RequestBody @ModelAttribute Manager manager) throws IOException {
		int row = 0;
		Manager m = (Manager) session().getAttribute(Constant.SESSION_MANAGER);
		SysOpLog sysOpLog = new SysOpLog();
		manager.setOperaTime(new Date());
		manager.setOperator(m.getManageId());
		if (manager.getManageId() == null) {
			manager.setCreateTime(new Date());
			manager.setPassword(EncryptUtil.encrypt(manager.getPassword()));
			if (managerService.queryManager(manager) != null) {
				returnJson(new Result("0", "该管理员已存在"));
				return;
			}
			manager = managerService.createManager(manager);
			if (null != manager) {
				row = 1;
				sysOpLog = new SysOpLog(m.getManageId() + "", new Date(), "操作员管理", manager.getManageId() + "", "添加操作员信息", 0, 0);
			}
		} else {
			if (manager.getPassword().length() != 32) {
				manager.setPassword(EncryptUtil.encrypt(manager.getPassword()));
			}
			row = managerService.modifyManagerById(manager);
			sysOpLog = new SysOpLog(m.getManageId() + "", new Date(), "操作员管理", manager.getManageId() + "", "修改操作员信息", 0, 0);
		}
		systemLogService.createLog(sysOpLog);
		returnJson(row > 0 ? Result.success("操作成功！") : Result.failure("0", "操作失败！"));
	}

	/**
	 * 删除操作员
	 * 
	 * @param ids
	 * @throws IOException
	 */
	@RequestMapping(value = "del")
	public void deleteManager(String ids, String id) throws IOException {
		Manager m = (Manager) session().getAttribute(Constant.SESSION_MANAGER);
		SysOpLog sysOpLog = new SysOpLog();
		int row = 0;
		List<String> list = new ArrayList<String>();
		if (!StringUtils.isBlank(id)) {
			list.add(id);
			row = managerService.removeManagerByIds(list);
			sysOpLog = new SysOpLog(m.getManageId() + "", new Date(), "操作员管理", id, "删除操作员信息", 0, 0);
		} else if (!StringUtils.isBlank(ids)) {
			list = Arrays.asList(ids.split(","));
			row = managerService.removeManagerByIds(list);
			sysOpLog = new SysOpLog(m.getManageId() + "", new Date(), "操作员管理", ids, "删除操作员信息", 0, 0);
		}
		if (row > 0) {
			systemLogService.createLog(sysOpLog);
		}
		returnJson(row > 0 ? Result.success("操作成功！") : Result.failure("0", "操作失败！"));
	}

	/**
	 * 冻结操作员
	 * 
	 * @param mid
	 * @param session
	 * @throws IOException
	 */
	@RequestMapping(value = "frozen")
	public void frozen(Integer mid) throws IOException {
		Manager m = (Manager) session().getAttribute(Constant.SESSION_MANAGER);
		Manager manager = managerService.queryManagerById(mid);
		SysOpLog baseLog = null;
		String opContent = "";
		if (manager.getStatus() == null || manager.getStatus().equals("1")) {
			manager.setStatus("0");
			opContent = "启用管理员";
		} else {
			manager.setStatus("1");
			opContent = "冻结管理员";
		}
		baseLog = new SysOpLog(String.valueOf(m.getManageId()), new Date(), "管理员管理", mid + "", opContent, 0, 0);
		int row = managerService.modifyManagerById(manager);
		Map<String, String> map = new HashMap<String, String>();
		map.put("msg", "0".equals(manager.getStatus()) ? "启用成功！" : "冻结成功！");
		if (row > 0) {
			systemLogService.createLog(baseLog);
		}
		returnJson(row > 0 ? Result.success("操作成功！") : Result.failure("0", "操作失败！"));
	}
	/**
	 * 跳转的分配角色的页面
	 * 
	 * @param mid
	 * @return
	 */
	@RequestMapping(value = "toAssignRole")
	public String toAssignRole(Integer mid) {
		List<Role> existingRoleList = managerService.queryExistingRoleByMid(mid);
		List<Role> roleList = managerService.queryRoleList();
		request().setAttribute("roleList", roleList);
		request().setAttribute("existingRoleList", JsonUtil.objectToJson(existingRoleList));
		request().setAttribute("mid", mid);
		return "manage/manage_assignrole";
	}

	/**
	 * 分配角色
	 * 
	 * @param mid
	 * @param ids
	 */
	@RequestMapping(value = "assignRole")
	public void assignRole(Integer mid, String ids) {
		Manager manager = (Manager) session().getAttribute(Constant.SESSION_MANAGER);
		Map<String, Object> map = new HashMap<String, Object>();
		List<Integer> list = new ArrayList<Integer>();
		if (!StringUtils.isBlank(ids)) {
			for (String id : ids.split(",")) {
				list.add(Integer.parseInt(id));
			}
		}
		map.put("manageId", mid);
		map.put("ids", list);
		map.put("operator", manager.getManageId());
		map.put("operatime", new Date());
		int row = managerService.assignRole(map);
		if (row > 0) {
			SysOpLog sysOpLog = new SysOpLog(manager.getManageId() + "", new Date(), "管理员管理", mid + "", "分配角色", 0, 0);
			systemLogService.createLog(sysOpLog);
		}
		returnJson(row > 0 ? Result.success("操作成功！") : Result.failure("0", "操作失败！"));
	}

}
